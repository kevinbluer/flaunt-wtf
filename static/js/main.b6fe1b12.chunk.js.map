{"version":3,"sources":["Assets/troll.png","Components/AccountInfo.js","Components/Torus.js","App.js","Components/Navigation.js","Pages/Gallery.js","Pages/About.js","Pages/View.js","Pages/NotFound.js","Assets/eyes.png","Assets/shades.png","Assets/doge.png","Assets/joint.png","Assets/sample-1.png","Assets/sample-2.jpg","Assets/sample-3.jpg","Assets/sample-4.png","Assets/sample-5.png","reportWebVitals.js","index.js"],"names":["MemeButton","styled","button","AccountInfo","handleLogout","bridgeDetails","privKey","arbSigner","arbProvider","metadataCID","useState","mintStatus","setMintStatus","bridge","useArbTokenBridge","walletAddress","balances","console","log","contractArbitrum","ethers","Contract","a","toast","info","eth","deposit","receipt","success","refreshBalances","reason","error","withdraw","alert","update","useEffect","window","setTimeout","mint","tx","className","title","extra","type","onClick","style","margin","utils","formatEther","balance","arbChainBalance","kovan4_testnet_config","ethProvider","getDefaultProvider","JsonRpcProvider","Login","l1Provider","l1Signer","skaleProvider","arbitrumProvider","showAccountDialog","accountDialog","loading","setLoading","undefined","openlogin","setSdk","bridgeInstance","setArbitrumBridge","setArbSigner","login","loginProvider","redirectUrl","origin","createArbitrumBridge","privateKey","ethSigner","Bridge","sdkInstance","OpenLogin","clientId","network","init","initializeOpenlogin","logout","aria-label","StyledLink","Link","Navigation","navIsActive","setNavIsActive","active","transparent","background","Brand","Item","renderAs","to","src","troll","alt","Burger","Menu","Container","align","href","Gallery","contract","contractSkale","walletDetected","arbAssets","setArbAssets","l1Assets","setL1Assets","loadArb","totalSupply","totalSupplyNum","toNumber","Array","map","_","i","id","tokenURI","item","newItem","prev","loadL1","About","StyledSVG","ReactSVG","Title","h2","ipfsClient","require","setTitle","description","setDescription","svg","setSvg","useParams","sanitize","url","cidV0","replace","cidV1","CID","toV1","load","metadataUri","santizedMetadataUri","fetch","res","json","metadata","santizedSvgUri","image","name","wrapper","NotFound","fabric","ipfs","host","port","protocol","StyledSketchField","SketchField","StyledTextBox","input","StyledButton","ThumbImg","img","ethereum","enable","then","providers","Web3Provider","getSigner","err","abi","App","imageCID","setImageCID","setMetadataCID","importAddress","setImportAddress","Math","floor","random","importId","setImportId","Tools","Select","tool","setTool","mintModal","setMintModal","loadModal","setLoadModal","saveModal","setSaveModal","isValidL1","setIsValidL1","infuraProvider","InfuraProvider","checkNetworks","getNetwork","includes","chainId","_sketch","useRef","text","current","addText","remove","removeSelected","toggleLoadModal","x","split","loadImage","indexOf","axios","get","responseType","response","reader","FileReader","readAsDataURL","data","onload","Image","fromURL","result","oImg","scaleToWidth","setBackgroundFromDataUrl","toDataURL","stretched","originX","originY","loadExistingNFT","metadataRes","toggleSaveModal","save","actuallySave","onloadend","fileContents","add","ipfsImg","ipfsMetadata","canvas","blob","mintNFT","getAddress","address","wait","storageDeal","metadataDeal","jsonrpc","method","params","Data","TransferType","Root","PieceCid","PieceSize","Wallet","Miner","EpochPrice","MinBlocksDuration","post","switchToSKALE","chainName","rpcUrls","nativeCurrency","symbol","decimals","blockExplorerUrls","request","catch","message","mintToSKALE","mintToArb","path","exact","addImg","doge","eyes","shades","joint","Pencil","width","height","lineColor","lineWidth","ref","c","sample1","sample2","sample5","sample3","sample4","value","placeholder","onChange","e","currentTarget","target","View","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.b6fe1b12.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/troll.b677baa7.png\";","import React, { useEffect, useState } from \"react\";\n// import { PageHeader, Button } from \"antd\";\nimport { useArbTokenBridge } from \"token-bridge-sdk\";\nimport { ethers, utils } from \"ethers\";\nimport { toast, ToastContainer  } from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport styled from \"styled-components\";\n\nconst MemeButton = styled.button`\n  cursor: pointer;\n  margin: 1rem 0.1rem 1rem 0.1rem;\n  border: 0;\n  border-radius: 0.4rem;\n  padding: 0.4rem 1rem;\n  font-size: 1rem;\n  font-family: 'courier';\n  box-shadow:\n    0 2.8px 2.2px rgba(0, 0, 0, 0.034),\n    0 6.7px 5.3px rgba(0, 0, 0, 0.048),\n    0 12.5px 10px rgba(0, 0, 0, 0.06),\n    0 22.3px 17.9px rgba(0, 0, 0, 0.072),\n    0 41.8px 33.4px rgba(0, 0, 0, 0.086),\n    0 100px 80px rgba(0, 0, 0, 0.12);\n\n  :hover {\n    background-color: orange;\n    color: white;\n  }\n`;\n\nfunction AccountInfo({handleLogout, privKey, bridgeDetails, arbProvider, arbSigner, metadataCID}) {\n  const [mintStatus, setMintStatus] = useState('not started')\n\n  const bridge = useArbTokenBridge(\n        bridgeDetails, false\n  )\n\nconst {\n  walletAddress,\n  balances,\n} = bridge;\n console.log(\"bridge\", bridge)\n\n const abi = [\n    \"function totalSupply() view returns (uint)\",\n    \"function tokenByIndex(uint) view returns (uint)\",\n    \"function tokenURI(uint) view returns (string)\",\n    \"function mint(address, string) returns (uint)\"\n  ];\n\n const contractArbitrum = new ethers.Contract(\"0xe41eE07A9F41CD1Ab4e7F25A93321ba1Dc0Ec5b0\", abi, arbSigner);\n\n useEffect(()=>{\n    window.setTimeout(async()=>{\n      await balances.update()\n    }, 3000);\n },[])\n\n async function depositEthToArbitrum(){\n  try {\n    toast.info(\"deposit request initiated. waiting for confirmation\");\n    const receipt = await bridge.eth.deposit(\"0.01\");\n    console.log(\"reciept\", receipt);\n    toast.success(\"Eth depostited to arbitrum bridge wallet\")\n    refreshBalances();\n  } catch (error) {\n    console.log(\"error\", error.reason);\n    toast.error(\"Error while depositing eth to arbitrum:\"+  error.reason);\n  }\n}\n\nasync function withdrawEthToArbitrum(){\n  try {\n    toast.info(\"Withdrawal request initiated, waiting for confirmation\");\n    const receipt = await bridge.eth.withdraw(\"0.01\");\n    console.log(\"reciept\", receipt);\n    toast.success(\"Eth withdrawn request sent from arbitrum bridge wallet\")\n    refreshBalances();\n  } catch (error) {\n    console.log(\"error\", error);\n    alert(\"Error while withdrawing eth from arbitrum:\"+ error.reason);\n  }\n}\n\nasync function refreshBalances(){\n  await balances.update()\n  toast.success(\"Balance refreshed successfully\");\n}\n\nconst mint = async (metadataCID) => {\n  setMintStatus('started')\n  const tx = await contractArbitrum.mint(walletAddress, metadataCID);\n  console.log(tx)\n  setMintStatus('minted! head to the gallery to view')\n}\n\n return (\n    <div>\n        <ToastContainer/>\n        <div\n            className=\"site-page-header\"\n            title=\"Openlogin x Arbitrum\"\n            extra={[\n                <button key=\"1\" type=\"primary\" onClick={handleLogout}>\n                Logout\n                </button>,\n            ]}\n        />\n        <div className=\"container\">\n          <div style={{margin:4}}>\n            <div><strong>manage torus account</strong></div>\n            <br />\n            <div>\n              address: <i>{walletAddress}</i>\n            </div>\n            <div>\n              l1 eth balance: <i>{(utils.formatEther(balances.eth.balance)) || 0}</i>\n            </div>\n            <div>\n              arb eth balance: <i>{(utils.formatEther(balances.eth.arbChainBalance)) || 0}</i>\n            </div>\n            {/* <span>Private key:</span>\n            <div style={{maxWidth: 900, wordWrap: \"break-word\"}}>\n                <span style={{margin: 20}}>{(privKey)}</span>\n            </div> */}\n            <MemeButton onClick={depositEthToArbitrum}>\n                deposit eth to arb\n            </MemeButton>\n            &nbsp;\n            <MemeButton onClick={withdrawEthToArbitrum}>\n                withdraw eth from arb\n            </MemeButton>\n            &nbsp;\n            <MemeButton onClick={refreshBalances}>\n                refresh\n            </MemeButton>\n          </div>\n          <hr />\n          <div>\n            <MemeButton onClick={() => { mint(metadataCID) }}>\n                mint to arbitrum\n            </MemeButton>\n            <div>mint status: {mintStatus}</div>\n          </div>\n        </div>\n        <hr />\n        withdrawals from arbitrum to l1 take approximately 24 hours\n  </div>\n )\n}\n\nexport default AccountInfo;","import React, { useEffect, useState } from \"react\";\nimport OpenLogin from \"@toruslabs/openlogin\";\nimport AccountInfo  from \"./AccountInfo\";\nimport { Bridge } from \"arb-ts\";\nimport  * as ethers from \"ethers\";\n\n// import \"./style.scss\";\n\nconst kovan4_testnet_config = {\n  ethRPC: \"https://kovan.infura.io/v3/65982ef7e3f24b3586823483ebdc99e0\",\n  arbRPC: 'https://kovan4.arbitrum.io/rpc',\n  erc20BridgeAddress: '0x2948ac43e4AfF448f6af0F7a11F18Bb6062dd271',\n  arbTokenBridgeAddress: '0x64b92d4f02cE1b4BDE2D16B6eAEe521E27f28e07',\n};\n\nconst ethProvider = ethers.providers.getDefaultProvider(kovan4_testnet_config.ethRPC);\nconst arbProvider = new ethers.providers.JsonRpcProvider(kovan4_testnet_config.arbRPC);\n\n\nfunction Login({showAccountDialog, accountDialog, metadataCID}) {\n  const [loading, setLoading] = useState(false);\n  const [openlogin, setSdk] = useState(undefined);\n  const [bridgeInstance, setArbitrumBridge] = useState(null);\n  const [arbSigner, setArbSigner] = useState(null);\n  \n  useEffect(() => {\n    setLoading(true);\n    async function initializeOpenlogin() {\n      const sdkInstance = new OpenLogin({\n        clientId: \"BHEDy3yxtQ6CQBwX92Y7bCw4AzriP7SrDp1gYGP-4-jAWFvx8cQx0v4e9jC9w60hwy2TjmBpuYAXY_KRHscWY-E\", // your project id\n        network: \"testnet\",\n      });\n      await sdkInstance.init();\n      if (sdkInstance.privKey) {\n        const privateKey = sdkInstance.privKey;\n        createArbitrumBridge(privateKey);\n      }\n      setSdk(sdkInstance);\n      setLoading(false);\n    }\n    initializeOpenlogin();\n  }, []);\n\n  async function handleLogin() {\n    setLoading(true)\n    try {\n      const privKey = await openlogin.login({\n        loginProvider: \"google\",\n        redirectUrl: `${window.origin}`,\n      });\n      setLoading(false)\n    } catch (error) {\n      console.log(\"error\", error);\n      setLoading(false)\n    }\n  }\n\n  async function createArbitrumBridge(privateKey){\n    const ethSigner = new ethers.Wallet(privateKey, ethProvider);\n    const arbSigner = new ethers.Wallet(privateKey, arbProvider);\n    const bridgeInstance = new Bridge(kovan4_testnet_config.erc20BridgeAddress,kovan4_testnet_config.arbTokenBridgeAddress, ethSigner, arbSigner);\n    setArbitrumBridge(bridgeInstance);\n    setArbSigner(arbSigner);\n  }\n\n  const handleLogout = async () => {\n    setLoading(true)\n    await openlogin.logout();\n    setLoading(false)\n  };\n\n  return (\n    <>\n    {\n    loading ?\n      <div>\n          <strong>loading...</strong>\n      </div> :\n      <div>\n        {\n          (openlogin && openlogin.privKey) ?\n            <span>logged in (<strong onClick={() => showAccountDialog( accountDialog ? false : true)}>view account</strong>)</span> :\n            <div>\n                <div onClick={handleLogin}>\n                  <strong>login with openlogin</strong> \n                </div>\n            </div>\n        }\n\n      </div>\n    }\n\n  <div className={`modal ${ accountDialog ? 'is-active' : ''}`}>\n      <div className=\"modal-background\"></div>\n      <div className=\"modal-content\">\n      <header className=\"modal-card-head\">\n        <p className=\"modal-card-title\">arbitrum (via torus)</p>\n        <button className=\"delete\" aria-label=\"close\" onClick={()=> showAccountDialog(false) }></button>\n      </header>\n      <section className=\"modal-card-body\">\n        {\n        (openlogin && openlogin.privKey) ?\n          <AccountInfo\n            bridgeDetails={bridgeInstance}\n            handleLogout={handleLogout}\n            loading={loading}\n            privKey={openlogin?.privKey}\n            arbProvider={arbProvider}\n            arbSigner={arbSigner}\n            metadataCID={metadataCID}\n          />\n        :\n        <span>please login into your torus account first</span>\n        }\n      </section>\n      <footer className=\"modal-card-foot\">\n      </footer>\n      </div>\n    </div>\n\n    </>\n  );\n}\n\nexport default Login;","import './App.css';\n\nimport React, { useRef, useState, useEffect } from \"react\";\n\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport {SketchField, Tools} from 'react-sketch';\nimport { ethers } from \"ethers\";\n\nimport {\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport Navigation from \"./Components/Navigation\";\nimport Gallery from \"./Pages/Gallery\";\nimport About from \"./Pages/About\";\nimport View from \"./Pages/View\";\nimport NotFound from './Pages/NotFound';\n\nimport eyes from './Assets/eyes.png';\nimport shades from './Assets/shades.png';\nimport doge from './Assets/doge.png';\nimport joint from './Assets/joint.png';\nimport troll from './Assets/troll.png';\n\nimport sample1 from './Assets/sample-1.png';\nimport sample2 from './Assets/sample-2.jpg';\nimport sample3 from './Assets/sample-3.jpg';\nimport sample4 from './Assets/sample-4.png';\nimport sample5 from './Assets/sample-5.png';\n\nconst fabric = require(\"fabric\").fabric;\n\nconst IPFS = require('ipfs-mini');\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\nconst ipfsClient = require(\"ipfs-http-client\");\n\nconst StyledSketchField = styled(SketchField)`\n  margin-top: 1rem;\n  box-shadow:\n    0 2.8px 2.2px rgba(0, 0, 0, 0.034),\n    0 6.7px 5.3px rgba(0, 0, 0, 0.048),\n    0 12.5px 10px rgba(0, 0, 0, 0.06),\n    0 22.3px 17.9px rgba(0, 0, 0, 0.072),\n    0 41.8px 33.4px rgba(0, 0, 0, 0.086),\n    0 100px 80px rgba(0, 0, 0, 0.12);\n  background-color: #e8e8e8;\n`;\n\nconst StyledTextBox = styled.input`\n  width: 100%;\n  font-size: 1.6rem;\n  border: solid 1px #c1b6b6;\n  border-radius: 1rem;\n  padding: 0.4rem 0.8rem;\n  margin-bottom: 0.2rem;\n  font-family: 'courier';\n`;\n\nconst StyledButton = styled.button`\n  cursor: pointer;\n  margin: 0.6rem 0.4rem;\n  border-radius: 1rem;\n  border: 0;\n  padding: 0.6rem 1.4rem;\n  font-size: 2rem;\n  font-family: 'courier';\n  box-shadow:\n    0 2.8px 2.2px rgba(0, 0, 0, 0.034),\n    0 6.7px 5.3px rgba(0, 0, 0, 0.048),\n    0 12.5px 10px rgba(0, 0, 0, 0.06),\n    0 22.3px 17.9px rgba(0, 0, 0, 0.072),\n    0 41.8px 33.4px rgba(0, 0, 0, 0.086),\n    0 100px 80px rgba(0, 0, 0, 0.12);\n\n  :hover {\n    background-color: orange;\n    color: white;\n  }\n`;\n\nconst MemeButton = styled.button`\n  cursor: pointer;\n  margin: 1rem 0.1rem 1rem 0.1rem;\n  border: 0;\n  border-radius: 0.4rem;\n  padding: 0.4rem 1rem;\n  font-size: 1rem;\n  font-family: 'courier';\n  box-shadow:\n    0 2.8px 2.2px rgba(0, 0, 0, 0.034),\n    0 6.7px 5.3px rgba(0, 0, 0, 0.048),\n    0 12.5px 10px rgba(0, 0, 0, 0.06),\n    0 22.3px 17.9px rgba(0, 0, 0, 0.072),\n    0 41.8px 33.4px rgba(0, 0, 0, 0.086),\n    0 100px 80px rgba(0, 0, 0, 0.12);\n\n  :hover {\n    background-color: orange;\n    color: white;\n  }\n`;\n\nconst ThumbImg = styled.img`\n  border-radius: 1rem;\n  width: 6rem;\n  padding: 0.2rem;\n  cursor: pointer;\n`;\n\n// const provider = new ethers.providers.InfuraProvider();\n\nlet l1Provider, l1Signer, skaleProvider, arbitrumProvider;\nlet walletDetected = !!window.ethereum;\n\ntry {\n  if (window.ethereum) {\n    window.ethereum.enable().then(l1Provider = new ethers.providers.Web3Provider(window.ethereum));\n    l1Signer = l1Provider.getSigner();\n  } else {\n    l1Provider = ethers.getDefaultProvider('kovan');\n  }\n  \n  skaleProvider = new ethers.providers.JsonRpcProvider(`https://dev-testnet-v1-0.skalelabs.com`)\n  arbitrumProvider = new ethers.providers.JsonRpcProvider(`https://kovan4.arbitrum.io/rpc`)\n\n} catch (err) {\n  console.log(err);\n}\n\nconst abi = [\n  \"function totalSupply() view returns (uint)\",\n  \"function tokenByIndex(uint) view returns (uint)\",\n  \"function tokenURI(uint) view returns (string)\",\n  \"function mint(address, string) returns (uint)\"\n];\n\nfunction App() {\n  const [imageCID, setImageCID] = useState('');\n  const [metadataCID, setMetadataCID] = useState('');\n  const [importAddress, setImportAddress] = useState('0x3B3ee1931Dc30C1957379FAc9aba94D1C48a5405');\n  const [importId, setImportId] = useState(Math.floor(Math.random() * 24437)); // 24437, 12345, 11155, 1265, 175, 17367, 17618, 10798 :)))\n  const [tool, setTool] = useState(Tools.Select);\n  const [mintStatus, setMintStatus] = useState(false);\n\n  const [mintModal, setMintModal] = useState(false);\n  const [loadModal, setLoadModal] = useState(false);\n  const [saveModal, setSaveModal] = useState(false);\n  const [accountDialog, showAccountDialog] = useState(false);\n\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [isValidL1, setIsValidL1] = useState();\n\n\n  // TODO - detect network and load from the appropriate contract\n\n  console.log(l1Signer || l1Provider)\n  const contract = new ethers.Contract(\"0xe41eE07A9F41CD1Ab4e7F25A93321ba1Dc0Ec5b0\", abi, l1Signer || l1Provider);\n  const contractSkale = new ethers.Contract(\"0x6bef29BdBf7de18caf2fA2422A4ec3d4c7d0a064\", abi, skaleProvider);\n  const contractArbitrum = new ethers.Contract(\"0xe41eE07A9F41CD1Ab4e7F25A93321ba1Dc0Ec5b0\", abi, arbitrumProvider);\n\n  // kovan - 0xe41eE07A9F41CD1Ab4e7F25A93321ba1Dc0Ec5b0\n  // skale - 0x6bef29BdBf7de18caf2fA2422A4ec3d4c7d0a064\n  // arbitrum - 0xe41eE07A9F41CD1Ab4e7F25A93321ba1Dc0Ec5b0\n\n  const infuraProvider = new ethers.providers.InfuraProvider();\n\n  const checkNetworks = async () => {\n    if (l1Provider) {\n      const network = await l1Provider.getNetwork();\n      if ([42, 1337, 344435, 801984078892471].includes(network.chainId)) {\n        setIsValidL1(true)\n      }\n    } else {\n      setIsValidL1(false)\n    }\n\n  }\n\n  const _sketch = useRef();\n\n  const thugify = () => {\n    _sketch.current.addImg(shades)\n    _sketch.current.addImg(joint)\n  }\n\n  const dogeify = () => {\n    _sketch.current.addImg(doge)\n  }\n\n  const laserify = () => {\n    _sketch.current.addImg(eyes)\n  }\n\n  const trollify = () => {\n    _sketch.current.addImg(troll)\n  }\n\n  const select = () => {\n    setTool(Tools.Select)\n  }\n\n  const pen = () => {\n    setTool(Tools.Pencil)\n  }\n\n  const text = async () => {\n    _sketch.current.addText('SCALING FTW', {\n      \"fontFamily\": \"Impact\",\n      \"fill\": \"#fff\",\n      \"stroke\": \"#000\",\n      \"strokeWidth\": \"1\"\n    });\n    setTool(Tools.Select)\n  }\n\n  const remove = async () => {\n    _sketch.current.removeSelected();\n  }\n\n  const toggleLoadModal = () => {\n    if (loadModal) {\n      setLoadModal(false)\n    } else {\n      setLoadModal(true)\n    }\n  }\n\n  const sanitize = (url) => {\n    // hacks all the way down\n    const x = url.replace('ipfs/', '').replace('ipfs://', '');\n    const cidV0 = x.split('/')[0];\n    const cidV1 = new ipfsClient.CID(cidV0).toV1();\n    const sanitized = `https://${cidV1}.ipfs.dweb.link/${x.split('/')[1]}`;\n    return sanitized;\n  }\n\n  const loadImage = async (url) => {\n    if (url.indexOf('mp4') > -1) {\n      alert('unable to load videos');\n      setLoadModal(true)\n      return;\n    }\n\n    const response = await axios.get(url, { responseType: 'blob' }); \n    const reader = new FileReader();\n    reader.readAsDataURL(response.data); \n    reader.onload = async () => {\n      fabric.Image.fromURL(reader.result, function(oImg) {\n        oImg.scaleToWidth(640);\n        _sketch.current.setBackgroundFromDataUrl(oImg.toDataURL(), {\n            stretched: true,\n            originX: \"left\",\n            originY: \"top\",\n          }); \n      });\n    }\n  }\n\n  const loadExistingNFT = async () => {\n    // debugger;\n    const contract = new ethers.Contract(importAddress, abi, infuraProvider);\n    const metadataUri = await contract.tokenURI(importId);\n    const metadataRes = await fetch(metadataUri);\n    const metadata = await metadataRes.json();\n    const santizedMetadataUri = sanitize(metadata.image)\n\n    console.log(santizedMetadataUri) \n    loadImage(santizedMetadataUri)\n    setLoadModal(false)\n  }\n\n\n\n  const load = async (url) => {   \n    loadImage(url)\n    setLoadModal(false)\n  }\n\n  const toggleSaveModal = () => {\n    if (saveModal) {\n      setSaveModal(false)\n    } else {\n      setSaveModal(true)\n    }\n  }\n\n  const save = async () => {\n    toggleSaveModal()\n  }\n\n  const actuallySave = async () => {\n    const reader = new FileReader()\n    reader.onloadend = async function () {\n      const fileContents = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\"><image width=\"100%\" height=\"100%\" href=\"${reader.result}\" /></svg>`;\n      const ipfsImg = await ipfs.add(fileContents);\n      setImageCID(ipfsImg);\n\n      // TODO - load the title / description from fields (prepopulate from what's loaded)\n      const metadata = `{ \"name\":\"${title}\", \"description\":\"${description}\",\"image\":\"ipfs://${ipfsImg}\" }`\n\n      const ipfsMetadata = await ipfs.add(metadata);\n      setMetadataCID(ipfsMetadata);\n\n    }\n    const canvas = _sketch.current.toDataURL();\n    const blob = await (await fetch(canvas)).blob();\n    reader.readAsDataURL(blob);\n  }\n\n  const mintNFT = async () => {\n    setMintStatus('minting...')\n    const address = await l1Signer.getAddress();\n    const tx = await contract.mint(address, metadataCID);\n    setMintStatus('transaction sent!');\n    await tx.wait();\n    setMintStatus('minted! head to the gallery to check it out');\n  }\n\n  const mint = () => {\n    if (mintModal) {\n      setMintModal(false)\n    } else {\n      setMintModal(true)\n    }\n  }\n\n  const storageDeal = async () => {\n    const metadataDeal = {\n      jsonrpc:\"2.0\",\n      id:0,\n      method:\"Filecoin.ClientStartDeal\",\n      params:[\n        {Data:{\n          TransferType:\"graphsync\",\n          Root:\n            {\"/\":metadataCID},\n          PieceCid:null,\n          PieceSize:0},\n          Wallet: \"t3r3yrbujjmmjdixnnaab35ioi7ntpnlrt4bmsrtw4j5d6kjb2eeyu7axr2zv2g5m5emby6mzn6rvqjwzbfrya\",\n          Miner: \"t01000\",\n          EpochPrice: 2500,\n          MinBlocksDuration: 300\n        }]\n      };\n    const res = await axios.post(\n      'http://localhost:7777/rpc/v0',\n      metadataDeal\n    )\n    console.log(res)\n  }\n\n  const switchToSKALE = async () => {\n    let params = {\n      chainId: \"0x54173\", //decodes to 344435\n      chainName: \"SKALE Network Testnet\",\n      rpcUrls: [\"https://dev-testnet-v1-0.skalelabs.com\"],\n      nativeCurrency: {\n        name: \"SKALE ETH\",\n        symbol: \"skETH\",\n        decimals: 18\n      },\n      blockExplorerUrls: [\n        \"https://expedition.dev/?rpcUrl=https://dev-testnet-v1-0.skalelabs.com\"\n      ]\n    };\n\n    const address = await l1Signer.getAddress();\n\n    //request change to SKALE Network\n    window.ethereum\n      .request({\n        method: \"wallet_addEthereumChain\",\n        params: [params, address]\n      })\n      .catch((error) => console.log(error.message));\n  }\n\n  const randomize = () => {\n    setImportId(Math.floor(Math.random() * 24437));\n  }\n\n  const mintToSKALE = async () => {\n    debugger;\n    setMintStatus('minting...')\n    const address = await l1Signer.getAddress();\n    const tx = await contract.mint(address, metadataCID);\n    setMintStatus('transaction sent!');\n    await tx.wait();\n    setMintStatus('minted! head to the gallery to check it out');\n  }\n\n  const mintToArb = async () => {\n    setMintModal(false);\n    showAccountDialog(true);\n  }\n\n  useEffect(() => {\n    checkNetworks()\n  },[])\n\n  return (\n    <Switch>\n      <Route path=\"/\" exact>\n        <div className=\"App\">\n          <Navigation accountDialog={accountDialog} showAccountDialog={showAccountDialog} metadataCID={metadataCID} />\n          { \n            !isValidL1 ? (<div>unable to detect valid network. please connect to the kovan l1 testnet</div>) : <></>\n          }\n          <header className=\"App-header\">\n            <div>\n              <StyledButton onClick={() => toggleLoadModal()}>load</StyledButton>\n              <span>&gt;</span>\n              <StyledButton onClick={() => save()}>save</StyledButton>\n              <span>&gt;</span>\n              <StyledButton onClick={() => mint()}>mint</StyledButton>\n            </div>\n            <div>\n              <MemeButton onClick={() => dogeify()}>dogeify</MemeButton>\n              <MemeButton onClick={() => laserify()}>laserify</MemeButton>\n              <MemeButton onClick={() => trollify()}>trollify</MemeButton>\n              <MemeButton onClick={() => thugify()}>thugify</MemeButton>\n              <MemeButton onClick={() => text()}>textify</MemeButton>\n              &nbsp;&nbsp;\n              <MemeButton onClick={() => select()}>select</MemeButton>\n              <MemeButton onClick={() => pen()}>pen</MemeButton>\n              <MemeButton onClick={() => remove()}>remove</MemeButton>\n            </div>\n            <StyledSketchField \n              width='640px' \n              height='640px' \n              tool={tool} \n              lineColor='black'\n              lineWidth={3}\n              ref={(c) => { _sketch.current = c }}\n              name='sketch'\n              />\n          </header>\n\n          <div className={`modal ${ loadModal ? 'is-active' : ''}`}>\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-content\">\n            <header className=\"modal-card-head\">\n              <p className=\"modal-card-title\">load</p>\n              <button className=\"delete\" aria-label=\"close\" onClick={()=> toggleLoadModal() }></button>\n            </header>\n            <section className=\"modal-card-body\">\n              <h2>load a sample nft asset...</h2>\n              <ThumbImg src={sample1} onClick={() => load('https://bafybeibhg2ik63dnkb3el4nlh5qry3lnhfok3nh3csywi6joedv25kh77i.ipfs.dweb.link/image.png')}  />\n              <ThumbImg src={sample2} onClick={() => load('https://bafybeid5o4fkfgq62uvzuh24sgoo6jj2nir7ggk4o5rhwqb4sfr4wgbfku.ipfs.dweb.link/nft.jpg')} />\n              <ThumbImg src={sample5} onClick={() => load('https://bafybeifwsqojqrrtjsqcago3s6f5crkcra56ml6kti5ljxf74jceibca6e.ipfs.dweb.link/nft.jpg')} />\n              <ThumbImg src={sample3} onClick={() => load('https://bafybeieyl2r3uorgpotq76p6w2dbpxl3m2qablgkjawyzn5htdzudb5s4y.ipfs.dweb.link/nft.jpg')} />\n              <ThumbImg src={sample4} onClick={() => load('https://ipfs.io/ipfs/Qme9DzDKpwoY5JGXs6d9YwPrN5u6VbSgf31LC2YNfUX5hu/nft.png')} />\n              <hr />\n              <h2>load from an existing NFT, e.g.</h2>\n              <StyledTextBox value={importAddress} placeholder={`contract address`} onChange={(e) => setImportAddress(e.currentTarget.value)} />\n              <br />\n              <StyledTextBox value={importId} placeholder={`id`} onChange={(e) => setImportId(e.currentTarget.value)} />\n              <br />\n              <div>\n                <MemeButton onClick={() => randomize()}>randomize</MemeButton>\n                &nbsp;\n                <MemeButton onClick={() => loadExistingNFT()}>load from contract</MemeButton>\n              </div>\n            </section>\n            <footer className=\"modal-card-foot\">\n            </footer>\n            </div>\n          </div>\n\n          <div className={`modal ${ saveModal ? 'is-active' : ''}`}>\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-content\">\n            <header className=\"modal-card-head\">\n              <p className=\"modal-card-title\">save</p>\n              <button className=\"delete\" aria-label=\"close\" onClick={()=> toggleSaveModal() }></button>\n            </header>\n            <section className=\"modal-card-body\">\n              <StyledTextBox value={title} placeholder={`nft name`} onChange={(e) => setTitle(e.currentTarget.value)} />\n              <br />\n              <StyledTextBox value={description} placeholder={`nft description`} onChange={(e) => setDescription(e.currentTarget.value)} />\n              <br />\n              <MemeButton onClick={() => actuallySave()}>save to ipfs</MemeButton>\n              <hr />\n              <p>Image CID: <a href={`ipfs://${imageCID}`} target=\"_blank\">{`ipfs://${imageCID}`}</a></p>\n              <p>Metadata CID: <a href={`ipfs://${metadataCID}`} target=\"_blank\">{`ipfs://${metadataCID}`}</a></p>\n              <p>{ metadataCID ? `done! you're now ready to mint!` : ``}</p>\n              <hr />\n              <p>once your assets have been saved, it's highly recommended to preserve with a storage deal or pinning service</p>\n              <MemeButton onClick={() => storageDeal()}>preserve with filecoin</MemeButton>\n              &nbsp;\n              <MemeButton><a href=\"http://pinata.cloud/\" target=\"_blank\" style={{\"color\": \"#000\"}}>preserve with pinata</a></MemeButton>\n              <p>note that a filecoin requires a locally running lotus node</p>\n            </section>\n            <footer className=\"modal-card-foot\">\n            </footer>\n            </div>\n          </div>\n\n          <div className={`modal ${ mintModal ? 'is-active' : ''}`}>\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-content\">\n            <header className=\"modal-card-head\">\n              <p className=\"modal-card-title\">mint</p>\n              <button className=\"delete\" aria-label=\"close\" onClick={()=>mint()}></button>\n            </header>\n            <section className=\"modal-card-body\">\n              <p><strong>layer 1</strong></p>\n              <p>mint to layer 1 (more expensive / immediately usable)</p>\n              <MemeButton onClick={()=>mintNFT()}>mint to L1</MemeButton>\n              <p>{mintStatus}</p>\n              <hr />\n              <p><strong>SKALE</strong></p>\n              <p>mint to SKALE (cheaper / requires bridging from SKALE to l1)</p>\n              <MemeButton onClick={()=>switchToSKALE()}>switch metamask to SKALE</MemeButton>\n              &nbsp;\n              <MemeButton onClick={()=>mintToSKALE()}>mint to SKALE</MemeButton>\n              <hr />\n              <p><strong>arbitrum via torus</strong></p>\n              <p>mint to arbitrum (cheaper / requires bridging to l1)</p>\n              &nbsp;\n              <MemeButton onClick={()=>mintToArb()}>mint to arbitrum via torus</MemeButton>\n            </section>\n            <footer className=\"modal-card-foot\">\n            </footer>\n            </div>\n          </div>\n        </div>\n      </Route>\n      <Route path=\"/gallery\">\n        <div className=\"App\">\n          <Navigation accountDialog={accountDialog} showAccountDialog={showAccountDialog} />\n          <Gallery contract={contract} contractSkale={contractSkale} contractArbitrum={contractArbitrum} walletDetected={walletDetected} />\n        </div>\n      </Route>\n      <Route path=\"/about\">\n        <div className=\"App\">\n          <Navigation accountDialog={accountDialog} showAccountDialog={showAccountDialog} />\n          <About />\n        </div>\n      </Route>\n      <Route path=\"/v/:id\">\n        <div className=\"App\">\n          <Navigation accountDialog={accountDialog} showAccountDialog={showAccountDialog} />\n          <View contract={contract} walletDetected={walletDetected} />\n        </div>\n      </Route>\n      <Route component={NotFound}>\n        <div className=\"App\">\n          <Navigation accountDialog={accountDialog} showAccountDialog={showAccountDialog} />\n          <NotFound />\n        </div>\n      </Route>\n    </Switch>\n  );\n}\n\nexport default App;\n","import { useState } from \"react\";\n\nimport { Navbar, Section } from 'react-bulma-components';\nimport styled from 'styled-components';\n\nimport troll from \"../Assets/troll.png\"\n\nimport Login from \"./Torus\"\n\nimport {\n  Link\n} from \"react-router-dom\";\n\nconst StyledLink = styled(Link)`\n  color: #4a4a4a;\n`;\n\nconst Navigation = ({accountDialog, showAccountDialog, metadataCID}) => {\n  const [navIsActive, setNavIsActive] = useState(false);\n\n  return (\n      <Navbar\n        active={navIsActive}\n        transparent={true}\n        style={{background: \"none\"}}\n      >\n        <Navbar.Brand>\n          <Navbar.Item renderAs=\"span\">\n            <Link to=\"/\">\n              <img src={troll} alt=\"Flaunt\" />\n            </Link>\n          </Navbar.Item>\n          <Navbar.Burger onClick={() => setNavIsActive(navIsActive ? false : true) }/>\n        </Navbar.Brand>\n        <Navbar.Menu>\n          <Navbar.Container>\n            <Navbar.Item renderAs=\"span\">\n              <StyledLink to=\"/\">\n                home\n              </StyledLink>\n            </Navbar.Item>\n            <Navbar.Item renderAs=\"span\">\n              <StyledLink to=\"/gallery\">\n                gallery\n              </StyledLink>\n            </Navbar.Item>\n            <Navbar.Item renderAs=\"span\">\n              <StyledLink to=\"/about\">\n                about\n              </StyledLink>\n            </Navbar.Item>\n          </Navbar.Container>\n          <Navbar.Container align=\"end\">\n            <Navbar.Item href=\"#\">\n              <Login accountDialog={accountDialog} showAccountDialog={showAccountDialog} metadataCID={metadataCID} />\n            </Navbar.Item>\n          </Navbar.Container>\n        </Navbar.Menu>\n      </Navbar>\n  );\n};\n\nexport default Navigation;","import React, { useState, useEffect } from \"react\";\n\nimport {\n  Link\n} from \"react-router-dom\";\n\nimport { Button  } from 'react-bulma-components';\n\nconst Gallery = ({contract, contractSkale, contractArbitrum, walletDetected}) => {\n  const [arbAssets, setArbAssets] = useState([])\n  const [l1Assets, setL1Assets] = useState([])\n\n  const loadArb = async () => {\n\n    try {\n\n      const totalSupplyNum = ((await contractArbitrum.totalSupply()).toNumber());\n\n      const items = [...Array(totalSupplyNum)].map(async (_, i) => {\n        const id = i+1;\n        const item = await contractArbitrum.tokenURI(id)\n  \n        if (id > 2) {\n          const newItem = (\n            <li key={i}><Link to={`/v/${id}`}>{`${item} (${id})`}</Link></li>\n          );\n    \n          setArbAssets((prev) => {\n            return [...prev, newItem];\n          });\n        }\n\n      });\n\n    } catch {\n      \n    }\n\n    \n  }\n\n  const loadL1 = async () => {\n\n    try {\n\n      const totalSupplyNum = ((await contract.totalSupply()).toNumber());\n\n      const items = [...Array(totalSupplyNum)].map(async (_, i) => {\n        const id = i+1;\n        const item = await contract.tokenURI(id)\n  \n        const newItem = (\n          <li key={i}><Link to={`/v/${id}`}>{`${item} (${id})`}</Link></li>\n        );\n  \n        setL1Assets((prev) => {\n          return [...prev, newItem];\n        });\n      });\n\n    } catch {\n      \n    }\n\n\n  }\n\n  useEffect(() => {\n    loadArb()\n    loadL1()\n  }, [])\n  \n  return (\n    <div className=\"App\">\n      <h2>Gallery</h2>\n      <header className=\"App-header\">\n        <p>all the meme-ified goodness</p>\n        <br />\n        <div><strong>kovan l1</strong></div>\n        <ul>\n          {l1Assets}\n        </ul>\n        <br />\n        <div><strong>arbitrum l2</strong></div>\n        <ul>\n          {arbAssets}\n        </ul>\n      </header>\n    </div>\n  )\n};\n\nexport default Gallery;\n","import React, { useState, useEffect } from \"react\";\n\nimport { Button  } from 'react-bulma-components';\n\nconst About = ({contract}) => {\n  \n  return (\n    <div className=\"App\">\n      <h2>About</h2>\n      <header className=\"App-header\">\n        <h1>meme-ify your NFTs</h1>\n        <p>generate derivative assets (new NFTs) from items you already own</p>\n      </header>\n    </div>\n  )\n};\n\nexport default About;\n","import React, { useState, useEffect } from \"react\";\n\nimport { ReactSVG } from 'react-svg'\nimport styled from 'styled-components';\n\nimport {\n  useParams\n} from \"react-router-dom\";\n\nimport { Button  } from 'react-bulma-components';\n\nconst StyledSVG = styled(ReactSVG)`\n  width: 60vh;\n  height: 60vh;\n  margin-bottom: 1rem;\n  box-shadow:\n    0 2.8px 2.2px rgba(0, 0, 0, 0.034),\n    0 6.7px 5.3px rgba(0, 0, 0, 0.048),\n    0 12.5px 10px rgba(0, 0, 0, 0.06),\n    0 22.3px 17.9px rgba(0, 0, 0, 0.072),\n    0 41.8px 33.4px rgba(0, 0, 0, 0.086),\n    0 100px 80px rgba(0, 0, 0, 0.12);\n  background-color: #e8e8e8;\n`;\n\nconst Title = styled.h2`\n  font-weight: bold;\n  font-size: 2rem;\n`;\n\nconst ipfsClient = require(\"ipfs-http-client\");\n\nconst Gallery = ({contract, walletDetected}) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [svg, setSvg] = useState();\n\n  const { id } = useParams()\n\n  const sanitize = (url) => {\n    const cidV0 = url.replace('/ipfs', '').replace('ipfs://', '');\n    const cidV1 = new ipfsClient.CID(cidV0).toV1();\n    return `https://${cidV1}.ipfs.dweb.link/`;\n  }\n\n  const load = async () => {\n    \n    const metadataUri = await contract.tokenURI(id)\n\n    console.log(metadataUri)\n\n    const santizedMetadataUri = sanitize(metadataUri)\n    const res = await fetch(santizedMetadataUri);\n    const metadata = await res.json();\n\n    const santizedSvgUri = sanitize(metadata.image)\n\n    setSvg(santizedSvgUri)\n    setTitle(metadata.name)\n    setDescription(metadata.description)\n  }\n\n  useEffect(() => {\n    // if (walletDetected) {\n      load()\n    // }\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {\n          svg === undefined ?\n          (`loading`) : <StyledSVG src={svg} wrapper=\"span\" />\n        }\n        <Title>{title}</Title>\n        <div>{description}</div>\n      </header>\n    </div>\n  )\n};\n\nexport default Gallery;\n","import React from \"react\";\n\nconst NotFound = ({contract}) => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>not found 😕</h1>\n      </header>\n    </div>\n  )\n};\n\nexport default NotFound;\n","export default __webpack_public_path__ + \"static/media/eyes.81ad596d.png\";","export default __webpack_public_path__ + \"static/media/shades.3530aa03.png\";","export default __webpack_public_path__ + \"static/media/doge.c79b108e.png\";","export default __webpack_public_path__ + \"static/media/joint.2da67bea.png\";","export default __webpack_public_path__ + \"static/media/sample-1.1e6f802a.png\";","export default __webpack_public_path__ + \"static/media/sample-2.e854d957.jpg\";","export default __webpack_public_path__ + \"static/media/sample-3.942cb87b.jpg\";","export default __webpack_public_path__ + \"static/media/sample-4.81671ddb.png\";","export default __webpack_public_path__ + \"static/media/sample-5.120f9728.png\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {\n  BrowserRouter\n} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}