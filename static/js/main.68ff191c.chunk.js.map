{"version":3,"sources":["Assets/troll.png","Components/AccountInfo.js","Components/Torus.js","App.js","Components/Navigation.js","Pages/Gallery.js","Pages/About.js","Pages/View.js","Pages/NotFound.js","Assets/eyes.png","Assets/shades.png","Assets/doge.png","Assets/joint.png","Assets/sample-1.png","Assets/sample-2.jpg","Assets/sample-3.jpg","Assets/sample-4.png","Assets/sample-5.png","reportWebVitals.js","index.js"],"names":["AccountInfo","handleLogout","privKey","bridgeDetails","bridge","useArbTokenBridge","walletAddress","balances","a","toast","info","eth","deposit","receipt","console","log","success","refreshBalances","reason","error","withdraw","alert","update","useEffect","window","setTimeout","className","title","extra","type","onClick","style","display","flexDirection","width","justifyContent","alignItems","margin","utils","formatEther","balance","arbChainBalance","maxWidth","wordWrap","kovan4_testnet_config","ethProvider","ethers","getDefaultProvider","arbProvider","JsonRpcProvider","Login","l1Provider","l1Signer","useState","loading","setLoading","undefined","openlogin","setSdk","bridgeInstance","setArbitrumBridge","accountDialog","showAccountDialog","login","loginProvider","redirectUrl","origin","createArbitrumBridge","privateKey","ethSigner","arbSigner","Bridge","sdkInstance","OpenLogin","clientId","network","init","initializeOpenlogin","logout","aria-label","StyledLink","styled","Link","Navigation","navIsActive","setNavIsActive","active","transparent","background","Brand","Item","renderAs","to","src","troll","alt","Burger","Menu","Container","align","href","Gallery","contract","walletDetected","assets","setAssets","totalSupply","setTotalSupply","load","totalSupplyNum","toNumber","Array","map","_","i","id","tokenURI","item","newItem","prev","About","StyledSVG","ReactSVG","Title","h2","ipfsClient","require","setTitle","description","setDescription","svg","setSvg","useParams","sanitize","url","cidV0","replace","cidV1","CID","toV1","metadataUri","santizedMetadataUri","fetch","res","json","metadata","santizedSvgUri","image","name","wrapper","NotFound","fabric","ipfs","host","port","protocol","ethereum","enable","then","providers","Web3Provider","getSigner","err","abi","StyledSketchField","SketchField","StyledTextBox","input","StyledButton","button","MemeButton","ThumbImg","img","App","imageCID","setImageCID","metadataCID","setMetadataCID","importAddress","setImportAddress","Math","floor","random","importId","setImportId","Tools","Select","tool","setTool","mintStatus","setMintStatus","mintModal","setMintModal","loadModal","setLoadModal","saveModal","setSaveModal","isValidL1","setIsValidL1","Contract","infuraProvider","InfuraProvider","checkNetworks","getNetwork","includes","chainId","_sketch","useRef","text","current","addText","remove","removeSelected","toggleLoadModal","x","split","loadImage","indexOf","axios","get","responseType","response","reader","FileReader","readAsDataURL","data","onload","Image","fromURL","result","oImg","scaleToWidth","setBackgroundFromDataUrl","toDataURL","stretched","originX","originY","loadExistingNFT","metadataRes","toggleSaveModal","save","actuallySave","onloadend","fileContents","add","ipfsImg","ipfsMetadata","canvas","blob","mintNFT","getAddress","address","mint","tx","wait","storageDeal","metadataDeal","jsonrpc","method","params","Data","TransferType","Root","PieceCid","PieceSize","Wallet","Miner","EpochPrice","MinBlocksDuration","post","switchToSKALE","chainName","rpcUrls","nativeCurrency","symbol","decimals","blockExplorerUrls","request","catch","message","mintToSKALE","mintToArb","path","exact","addImg","doge","eyes","shades","joint","Pencil","height","lineColor","lineWidth","ref","c","sample1","sample2","sample5","sample3","sample4","value","placeholder","onChange","e","currentTarget","target","View","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.68ff191c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/troll.b677baa7.png\";","import React, { useEffect, useState } from \"react\";\n// import { PageHeader, Button } from \"antd\";\nimport { useArbTokenBridge } from \"token-bridge-sdk\";\nimport { utils } from \"ethers\";\nimport { toast, ToastContainer  } from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nfunction AccountInfo({handleLogout, privKey, bridgeDetails}) {\nconst bridge = useArbTokenBridge(\n    bridgeDetails, false\n)\n\nconst {\n  walletAddress,\n  balances,\n} = bridge;\n console.log(\"bridge\", bridge)\n\n useEffect(()=>{\n    window.setTimeout(async()=>{\n      await balances.update()\n    }, 3000);\n },[])\n\n async function depositEthToArbitrum(){\n  try {\n    toast.info(\"deposit request initiated. waiting for confirmation\");\n    const receipt = await bridge.eth.deposit(\"0.01\");\n    console.log(\"reciept\", receipt);\n    toast.success(\"Eth depostited to arbitrum bridge wallet\")\n    refreshBalances();\n  } catch (error) {\n    console.log(\"error\", error.reason);\n    toast.error(\"Error while depositing eth to arbitrum:\"+  error.reason);\n  }\n}\n\nasync function withdrawEthToArbitrum(){\n  try {\n    toast.info(\"Withdrawal request initiated, waiting for confirmation\");\n    const receipt = await bridge.eth.withdraw(\"0.01\");\n    console.log(\"reciept\", receipt);\n    toast.success(\"Eth withdrawn request sent from arbitrum bridge wallet\")\n    refreshBalances();\n  } catch (error) {\n    console.log(\"error\", error);\n    alert(\"Error while withdrawing eth from arbitrum:\"+ error.reason);\n  }\n}\n\nasync function refreshBalances(){\n  await balances.update()\n  toast.success(\"Balance refreshed successfully\");\n}\n\n return (\n    <div>\n        <ToastContainer/>\n        <div\n            className=\"site-page-header\"\n            title=\"Openlogin x Arbitrum\"\n            extra={[\n                <button key=\"1\" type=\"primary\" onClick={handleLogout}>\n                Logout\n                </button>,\n            ]}\n        />\n        <div className=\"container\">\n        <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\", justifyContent: \"center\", alignItems: \"center\", margin: 20 }}>\n          <div style={{margin:4}}>\n            Wallet address: <i>{walletAddress}</i>\n          </div>\n          <div>\n            Eth chain Balance: <i>{(utils.formatEther(balances.eth.balance)) || 0}</i>\n          </div>\n          <div>\n            Arb chain Balance: <i>{(utils.formatEther(balances.eth.arbChainBalance)) || 0}</i>\n          </div>\n          <hr/>\n        <span>Private key:</span>\n          <div style={{maxWidth: 900, wordWrap: \"break-word\"}}>\n              <span style={{margin: 20}}>{(privKey)}</span>\n          </div>\n          </div>\n          <div>\n            <button onClick={depositEthToArbitrum}>\n                deposit eth to arbitrum chain\n            </button>\n            <button onClick={withdrawEthToArbitrum}>\n                withdraw eth from arbitrum\n            </button>\n            <button onClick={refreshBalances}>\n                refresh balances\n            </button>\n          </div>\n        </div>\n\n        withdrawals from l2(arbitrum) to l1(ethereum) takes 24 hours roughly on kovan4 testnet.\n  </div>\n )\n}\n\nexport default AccountInfo;","import React, { useEffect, useState } from \"react\";\nimport OpenLogin from \"@toruslabs/openlogin\";\nimport AccountInfo  from \"./AccountInfo\";\nimport { Bridge } from \"arb-ts\";\nimport  * as ethers from \"ethers\";\n\n// import \"./style.scss\";\n\nconst kovan4_testnet_config = {\n  ethRPC: \"https://kovan.infura.io/v3/65982ef7e3f24b3586823483ebdc99e0\",\n  arbRPC: 'https://kovan4.arbitrum.io/rpc',\n  erc20BridgeAddress: '0x2948ac43e4AfF448f6af0F7a11F18Bb6062dd271',\n  arbTokenBridgeAddress: '0x64b92d4f02cE1b4BDE2D16B6eAEe521E27f28e07',\n};\n\nconst ethProvider = ethers.providers.getDefaultProvider(kovan4_testnet_config.ethRPC);\nconst arbProvider = new ethers.providers.JsonRpcProvider(kovan4_testnet_config.arbRPC);\n\n\nfunction Login() {\n  const [loading, setLoading] = useState(false);\n  const [openlogin, setSdk] = useState(undefined);\n  const [bridgeInstance, setArbitrumBridge] = useState(null);\n  const [accountDialog, showAccountDialog] = useState(false);\n  \n  useEffect(() => {\n    setLoading(true);\n    async function initializeOpenlogin() {\n      const sdkInstance = new OpenLogin({\n        clientId: \"BHEDy3yxtQ6CQBwX92Y7bCw4AzriP7SrDp1gYGP-4-jAWFvx8cQx0v4e9jC9w60hwy2TjmBpuYAXY_KRHscWY-E\", // your project id\n        network: \"testnet\",\n      });\n      await sdkInstance.init();\n      if (sdkInstance.privKey) {\n        const privateKey = sdkInstance.privKey;\n        createArbitrumBridge(privateKey);\n      }\n      setSdk(sdkInstance);\n      setLoading(false);\n    }\n    initializeOpenlogin();\n  }, []);\n\n  async function handleLogin() {\n    setLoading(true)\n    try {\n      const privKey = await openlogin.login({\n        loginProvider: \"google\",\n        redirectUrl: `${window.origin}`,\n      });\n      setLoading(false)\n    } catch (error) {\n      console.log(\"error\", error);\n      setLoading(false)\n    }\n  }\n\n  async function createArbitrumBridge(privateKey){\n    const ethSigner = new ethers.Wallet(privateKey, ethProvider);\n    const arbSigner = new ethers.Wallet(privateKey, arbProvider);\n    const bridgeInstance = new Bridge(kovan4_testnet_config.erc20BridgeAddress,kovan4_testnet_config.arbTokenBridgeAddress, ethSigner, arbSigner);\n    setArbitrumBridge(bridgeInstance);\n  }\n\n  const handleLogout = async () => {\n    setLoading(true)\n    await openlogin.logout();\n    setLoading(false)\n  };\n\n  return (\n    <>\n    {\n    loading ?\n      <div>\n          <strong>loading...</strong>\n      </div> :\n      <div>\n        {\n          (openlogin && openlogin.privKey) ?\n            <span>logged in (<strong onClick={() => showAccountDialog( accountDialog ? false : true)}>view account</strong>)</span> :\n            <div>\n                <div onClick={handleLogin}>\n                  <strong>login with openlogin</strong> \n                </div>\n            </div>\n        }\n\n      </div>\n    }\n\n  <div className={`modal ${ accountDialog ? 'is-active' : ''}`}>\n      <div className=\"modal-background\"></div>\n      <div className=\"modal-content\">\n      <header className=\"modal-card-head\">\n        <p className=\"modal-card-title\">account</p>\n        <button className=\"delete\" aria-label=\"close\" onClick={()=> showAccountDialog(false) }></button>\n      </header>\n      <section className=\"modal-card-body\">\n        {\n        (openlogin && openlogin.privKey) ?\n          <AccountInfo\n            bridgeDetails={bridgeInstance}\n            handleLogout={handleLogout}\n            loading={loading}\n            privKey={openlogin?.privKey}\n          />\n        :\n        <span>initializing...</span>\n        }\n      </section>\n      <footer className=\"modal-card-foot\">\n      </footer>\n      </div>\n    </div>\n\n    </>\n  );\n}\n\nexport default Login;","import './App.css';\n\nimport React, { useRef, useState, useEffect } from \"react\";\n\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport {SketchField, Tools} from 'react-sketch';\nimport { ethers } from \"ethers\";\n\nimport {\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport Navigation from \"./Components/Navigation\";\nimport Gallery from \"./Pages/Gallery\";\nimport About from \"./Pages/About\";\nimport View from \"./Pages/View\";\nimport NotFound from './Pages/NotFound';\n\nimport eyes from './Assets/eyes.png';\nimport shades from './Assets/shades.png';\nimport doge from './Assets/doge.png';\nimport joint from './Assets/joint.png';\nimport troll from './Assets/troll.png';\n\nimport sample1 from './Assets/sample-1.png';\nimport sample2 from './Assets/sample-2.jpg';\nimport sample3 from './Assets/sample-3.jpg';\nimport sample4 from './Assets/sample-4.png';\nimport sample5 from './Assets/sample-5.png';\n\nconst fabric = require(\"fabric\").fabric;\n\nconst IPFS = require('ipfs-mini');\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\nconst ipfsClient = require(\"ipfs-http-client\");\n\n// const provider = new ethers.providers.InfuraProvider();\n\nlet l1Provider, l1Signer, l2Signer;\nlet walletDetected = !!window.ethereum;\n\ntry {\n  if (window.ethereum) {\n    window.ethereum.enable().then(l1Provider = new ethers.providers.Web3Provider(window.ethereum));\n    l1Signer = l1Provider.getSigner();\n  } else {\n    l1Provider = ethers.getDefaultProvider('kovan');\n  }\n    \n} catch (err) {\n  console.log(err);\n}\n\nconst abi = [\n  \"function totalSupply() view returns (uint)\",\n  \"function tokenByIndex(uint) view returns (uint)\",\n  \"function tokenURI(uint) view returns (string)\",\n  \"function mint(address, string) returns (uint)\"\n];\n\nconst StyledSketchField = styled(SketchField)`\n  margin-top: 1rem;\n  box-shadow:\n    0 2.8px 2.2px rgba(0, 0, 0, 0.034),\n    0 6.7px 5.3px rgba(0, 0, 0, 0.048),\n    0 12.5px 10px rgba(0, 0, 0, 0.06),\n    0 22.3px 17.9px rgba(0, 0, 0, 0.072),\n    0 41.8px 33.4px rgba(0, 0, 0, 0.086),\n    0 100px 80px rgba(0, 0, 0, 0.12);\n  background-color: #e8e8e8;\n`;\n\nconst StyledTextBox = styled.input`\n  width: 100%;\n  font-size: 1.6rem;\n  border: solid 1px #c1b6b6;\n  border-radius: 1rem;\n  padding: 0.4rem 0.8rem;\n  margin-bottom: 0.2rem;\n  font-family: 'courier';\n`;\n\nconst StyledButton = styled.button`\n  cursor: pointer;\n  margin: 0.6rem 0.4rem;\n  border-radius: 1rem;\n  border: 0;\n  padding: 0.6rem 1.4rem;\n  font-size: 2rem;\n  font-family: 'courier';\n  box-shadow:\n    0 2.8px 2.2px rgba(0, 0, 0, 0.034),\n    0 6.7px 5.3px rgba(0, 0, 0, 0.048),\n    0 12.5px 10px rgba(0, 0, 0, 0.06),\n    0 22.3px 17.9px rgba(0, 0, 0, 0.072),\n    0 41.8px 33.4px rgba(0, 0, 0, 0.086),\n    0 100px 80px rgba(0, 0, 0, 0.12);\n\n  :hover {\n    background-color: orange;\n    color: white;\n  }\n`;\n\nconst MemeButton = styled.button`\n  cursor: pointer;\n  margin: 1rem 0.1rem 1rem 0.1rem;\n  border: 0;\n  border-radius: 0.4rem;\n  padding: 0.4rem 1rem;\n  font-size: 1rem;\n  font-family: 'courier';\n  box-shadow:\n    0 2.8px 2.2px rgba(0, 0, 0, 0.034),\n    0 6.7px 5.3px rgba(0, 0, 0, 0.048),\n    0 12.5px 10px rgba(0, 0, 0, 0.06),\n    0 22.3px 17.9px rgba(0, 0, 0, 0.072),\n    0 41.8px 33.4px rgba(0, 0, 0, 0.086),\n    0 100px 80px rgba(0, 0, 0, 0.12);\n\n  :hover {\n    background-color: orange;\n    color: white;\n  }\n`;\n\nconst ThumbImg = styled.img`\n  border-radius: 1rem;\n  width: 6rem;\n  padding: 0.2rem;\n  cursor: pointer;\n`;\n\nfunction App() {\n  const [imageCID, setImageCID] = useState('');\n  const [metadataCID, setMetadataCID] = useState('');\n  const [importAddress, setImportAddress] = useState('0x3B3ee1931Dc30C1957379FAc9aba94D1C48a5405');\n  const [importId, setImportId] = useState(Math.floor(Math.random() * 24437)); // 24437, 12345, 11155, 1265, 175, 17367, 17618 :)))\n  const [tool, setTool] = useState(Tools.Select);\n  const [mintStatus, setMintStatus] = useState(false);\n  const [mintModal, setMintModal] = useState(false);\n  const [loadModal, setLoadModal] = useState(false);\n  const [saveModal, setSaveModal] = useState(false);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [isValidL1, setIsValidL1] = useState();\n\n\n  // TODO - detect network and load from the appropriate contract\n\n  console.log(l1Signer || l1Provider)\n  const contract = new ethers.Contract(\"0xe41eE07A9F41CD1Ab4e7F25A93321ba1Dc0Ec5b0\", abi, l1Signer || l1Provider);\n\n  // kovan - 0xe41eE07A9F41CD1Ab4e7F25A93321ba1Dc0Ec5b0\n  // skale - 0x6bef29BdBf7de18caf2fA2422A4ec3d4c7d0a064\n  // arbitrum - 0xe41eE07A9F41CD1Ab4e7F25A93321ba1Dc0Ec5b0\n\n  const infuraProvider = new ethers.providers.InfuraProvider();\n\n  const checkNetworks = async () => {\n    if (l1Provider) {\n      const network = await l1Provider.getNetwork();\n      if ([42, 1337, 344435, 801984078892471].includes(network.chainId)) {\n        setIsValidL1(true)\n      }\n    } else {\n      setIsValidL1(false)\n    }\n\n  }\n\n  const _sketch = useRef();\n\n  const thugify = () => {\n    _sketch.current.addImg(shades)\n    _sketch.current.addImg(joint)\n  }\n\n  const dogeify = () => {\n    _sketch.current.addImg(doge)\n  }\n\n  const laserify = () => {\n    _sketch.current.addImg(eyes)\n  }\n\n  const trollify = () => {\n    _sketch.current.addImg(troll)\n  }\n\n  const select = () => {\n    setTool(Tools.Select)\n  }\n\n  const pen = () => {\n    setTool(Tools.Pencil)\n  }\n\n  const text = async () => {\n    _sketch.current.addText('SCALING FTW', {\n      \"fontFamily\": \"Impact\",\n      \"fill\": \"#fff\",\n      \"stroke\": \"#000\",\n      \"strokeWidth\": \"1\"\n    });\n    setTool(Tools.Select)\n  }\n\n  const remove = async () => {\n    _sketch.current.removeSelected();\n  }\n\n  const toggleLoadModal = () => {\n    if (loadModal) {\n      setLoadModal(false)\n    } else {\n      setLoadModal(true)\n    }\n  }\n\n  const sanitize = (url) => {\n    // hacks all the way down\n    const x = url.replace('ipfs/', '').replace('ipfs://', '');\n    const cidV0 = x.split('/')[0];\n    const cidV1 = new ipfsClient.CID(cidV0).toV1();\n    const sanitized = `https://${cidV1}.ipfs.dweb.link/${x.split('/')[1]}`;\n    return sanitized;\n  }\n\n  const loadImage = async (url) => {\n    if (url.indexOf('mp4') > -1) {\n      alert('unable to load videos');\n      setLoadModal(true)\n      return;\n    }\n\n    const response = await axios.get(url, { responseType: 'blob' }); \n    const reader = new FileReader();\n    reader.readAsDataURL(response.data); \n    reader.onload = async () => {\n      fabric.Image.fromURL(reader.result, function(oImg) {\n        oImg.scaleToWidth(640);\n        _sketch.current.setBackgroundFromDataUrl(oImg.toDataURL(), {\n            stretched: true,\n            originX: \"left\",\n            originY: \"top\",\n          }); \n      });\n    }\n  }\n\n  const loadExistingNFT = async () => {\n    // debugger;\n    const contract = new ethers.Contract(importAddress, abi, infuraProvider);\n    const metadataUri = await contract.tokenURI(importId);\n    const metadataRes = await fetch(metadataUri);\n    const metadata = await metadataRes.json();\n    const santizedMetadataUri = sanitize(metadata.image)\n\n    console.log(santizedMetadataUri) \n    loadImage(santizedMetadataUri)\n    setLoadModal(false)\n  }\n\n\n\n  const load = async (url) => {   \n    loadImage(url)\n    setLoadModal(false)\n  }\n\n  const toggleSaveModal = () => {\n    if (saveModal) {\n      setSaveModal(false)\n    } else {\n      setSaveModal(true)\n    }\n  }\n\n  const save = async () => {\n    toggleSaveModal()\n  }\n\n  const actuallySave = async () => {\n    const reader = new FileReader()\n    reader.onloadend = async function () {\n      const fileContents = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\"><image width=\"100%\" height=\"100%\" href=\"${reader.result}\" /></svg>`;\n      const ipfsImg = await ipfs.add(fileContents);\n      setImageCID(ipfsImg);\n\n      // TODO - load the title / description from fields (prepopulate from what's loaded)\n      const metadata = `{ \"name\":\"${title}\", \"description\":\"${description}\",\"image\":\"ipfs://${ipfsImg}\" }`\n\n      const ipfsMetadata = await ipfs.add(metadata);\n      setMetadataCID(ipfsMetadata);\n\n    }\n    const canvas = _sketch.current.toDataURL();\n    const blob = await (await fetch(canvas)).blob();\n    reader.readAsDataURL(blob);\n  }\n\n  const mintNFT = async () => {\n    setMintStatus('minting...')\n    const address = await l1Signer.getAddress();\n    const tx = await contract.mint(address, metadataCID);\n    setMintStatus('transaction sent!');\n    await tx.wait();\n    setMintStatus('minted! head to the gallery to check it out');\n  }\n\n  const mint = () => {\n    if (mintModal) {\n      setMintModal(false)\n    } else {\n      setMintModal(true)\n    }\n  }\n\n  const storageDeal = async () => {\n    const metadataDeal = {\n      jsonrpc:\"2.0\",\n      id:0,\n      method:\"Filecoin.ClientStartDeal\",\n      params:[\n        {Data:{\n          TransferType:\"graphsync\",\n          Root:\n            {\"/\":metadataCID},\n          PieceCid:null,\n          PieceSize:0},\n          Wallet: \"t3r3yrbujjmmjdixnnaab35ioi7ntpnlrt4bmsrtw4j5d6kjb2eeyu7axr2zv2g5m5emby6mzn6rvqjwzbfrya\",\n          Miner: \"t01000\",\n          EpochPrice: 2500,\n          MinBlocksDuration: 300\n        }]\n      };\n    const res = await axios.post(\n      'http://localhost:7777/rpc/v0',\n      metadataDeal\n    )\n    console.log(res)\n  }\n\n  const switchToSKALE = async () => {\n    let params = {\n      chainId: \"0x54173\", //decodes to 344435\n      chainName: \"SKALE Network Testnet\",\n      rpcUrls: [\"https://dev-testnet-v1-0.skalelabs.com\"],\n      nativeCurrency: {\n        name: \"SKALE ETH\",\n        symbol: \"skETH\",\n        decimals: 18\n      },\n      blockExplorerUrls: [\n        \"https://expedition.dev/?rpcUrl=https://dev-testnet-v1-0.skalelabs.com\"\n      ]\n    };\n\n    const address = await l1Signer.getAddress();\n\n    //request change to SKALE Network\n    window.ethereum\n      .request({\n        method: \"wallet_addEthereumChain\",\n        params: [params, address]\n      })\n      .catch((error) => console.log(error.message));\n  }\n\n  const randomize = () => {\n    setImportId(Math.floor(Math.random() * 24437));\n  }\n\n  const mintToSKALE = async () => {\n    debugger;\n    setMintStatus('minting...')\n    const address = await l1Signer.getAddress();\n    const tx = await contract.mint(address, metadataCID);\n    setMintStatus('transaction sent!');\n    await tx.wait();\n    setMintStatus('minted! head to the gallery to check it out');\n  }\n\n  const mintToArb = async () => {\n    alert(`...`)\n  }\n\n  useEffect(() => {\n    checkNetworks()\n  },[])\n\n  return (\n    <Switch>\n      <Route path=\"/\" exact>\n        <div className=\"App\">\n          <Navigation />\n          { \n            !isValidL1 ? (<div>unable to detect valid network. please connect to the kovan l1 testnet</div>) : <></>\n          }\n          <header className=\"App-header\">\n            <div>\n              <StyledButton onClick={() => toggleLoadModal()}>load</StyledButton>\n              <span>&gt;</span>\n              <StyledButton onClick={() => save()}>save</StyledButton>\n              <span>&gt;</span>\n              <StyledButton onClick={() => mint()}>mint</StyledButton>\n            </div>\n            <div>\n              <MemeButton onClick={() => dogeify()}>dogeify</MemeButton>\n              <MemeButton onClick={() => laserify()}>laserify</MemeButton>\n              <MemeButton onClick={() => trollify()}>trollify</MemeButton>\n              <MemeButton onClick={() => thugify()}>thugify</MemeButton>\n              <MemeButton onClick={() => text()}>textify</MemeButton>\n              &nbsp;&nbsp;\n              <MemeButton onClick={() => select()}>select</MemeButton>\n              <MemeButton onClick={() => pen()}>pen</MemeButton>\n              <MemeButton onClick={() => remove()}>remove</MemeButton>\n            </div>\n            <StyledSketchField \n              width='640px' \n              height='640px' \n              tool={tool} \n              lineColor='black'\n              lineWidth={3}\n              ref={(c) => { _sketch.current = c }}\n              name='sketch'\n              />\n          </header>\n\n          <div className={`modal ${ loadModal ? 'is-active' : ''}`}>\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-content\">\n            <header className=\"modal-card-head\">\n              <p className=\"modal-card-title\">load</p>\n              <button className=\"delete\" aria-label=\"close\" onClick={()=> toggleLoadModal() }></button>\n            </header>\n            <section className=\"modal-card-body\">\n              <h2>load a sample nft asset...</h2>\n              <ThumbImg src={sample1} onClick={() => load('https://bafybeibhg2ik63dnkb3el4nlh5qry3lnhfok3nh3csywi6joedv25kh77i.ipfs.dweb.link/image.png')}  />\n              <ThumbImg src={sample2} onClick={() => load('https://bafybeid5o4fkfgq62uvzuh24sgoo6jj2nir7ggk4o5rhwqb4sfr4wgbfku.ipfs.dweb.link/nft.jpg')} />\n              <ThumbImg src={sample5} onClick={() => load('https://bafybeifwsqojqrrtjsqcago3s6f5crkcra56ml6kti5ljxf74jceibca6e.ipfs.dweb.link/nft.jpg')} />\n              <ThumbImg src={sample3} onClick={() => load('https://bafybeieyl2r3uorgpotq76p6w2dbpxl3m2qablgkjawyzn5htdzudb5s4y.ipfs.dweb.link/nft.jpg')} />\n              <ThumbImg src={sample4} onClick={() => load('https://ipfs.io/ipfs/Qme9DzDKpwoY5JGXs6d9YwPrN5u6VbSgf31LC2YNfUX5hu/nft.png')} />\n              <hr />\n              <h2>load from an existing NFT, e.g.</h2>\n              <StyledTextBox value={importAddress} placeholder={`contract address`} onChange={(e) => setImportAddress(e.currentTarget.value)} />\n              <br />\n              <StyledTextBox value={importId} placeholder={`id`} onChange={(e) => setImportId(e.currentTarget.value)} />\n              <br />\n              <div>\n                <MemeButton onClick={() => randomize()}>randomize</MemeButton>\n                &nbsp;\n                <MemeButton onClick={() => loadExistingNFT()}>load from contract</MemeButton>\n              </div>\n            </section>\n            <footer className=\"modal-card-foot\">\n            </footer>\n            </div>\n          </div>\n\n          <div className={`modal ${ saveModal ? 'is-active' : ''}`}>\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-content\">\n            <header className=\"modal-card-head\">\n              <p className=\"modal-card-title\">save</p>\n              <button className=\"delete\" aria-label=\"close\" onClick={()=> toggleSaveModal() }></button>\n            </header>\n            <section className=\"modal-card-body\">\n              <StyledTextBox value={title} placeholder={`nft name`} onChange={(e) => setTitle(e.currentTarget.value)} />\n              <br />\n              <StyledTextBox value={description} placeholder={`nft description`} onChange={(e) => setDescription(e.currentTarget.value)} />\n              <br />\n              <MemeButton onClick={() => actuallySave()}>save to ipfs</MemeButton>\n              <hr />\n              <p>Image CID: <a href={`ipfs://${imageCID}`} target=\"_blank\">{`ipfs://${imageCID}`}</a></p>\n              <p>Metadata CID: <a href={`ipfs://${metadataCID}`} target=\"_blank\">{`ipfs://${metadataCID}`}</a></p>\n              <p>{ metadataCID ? `done! you're now ready to mint!` : ``}</p>\n              <hr />\n              <p>once your assets have been saved, it's highly recommended to preserve with a storage deal or pinning service</p>\n              <MemeButton onClick={() => storageDeal()}>preserve with filecoin</MemeButton>\n              &nbsp;\n              <MemeButton><a href=\"http://pinata.cloud/\" target=\"_blank\" style={{\"color\": \"#000\"}}>preserve with pinata</a></MemeButton>\n              <p>note that a filecoin requires a locally running lotus node</p>\n            </section>\n            <footer className=\"modal-card-foot\">\n            </footer>\n            </div>\n          </div>\n\n          <div className={`modal ${ mintModal ? 'is-active' : ''}`}>\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-content\">\n            <header className=\"modal-card-head\">\n              <p className=\"modal-card-title\">mint</p>\n              <button className=\"delete\" aria-label=\"close\" onClick={()=>mint()}></button>\n            </header>\n            <section className=\"modal-card-body\">\n              <p><strong>layer 1</strong></p>\n              <p>mint to layer 1 (more expensive / immediately usable)</p>\n              <MemeButton onClick={()=>mintNFT()}>mint to L1</MemeButton>\n              <p>{mintStatus}</p>\n              <hr />\n              <p><strong>SKALE</strong></p>\n              <p>mint to SKALE (cheaper / requires bridging from SKALE to l1)</p>\n              <MemeButton onClick={()=>switchToSKALE()}>switch metamask to SKALE</MemeButton>\n              &nbsp;\n              <MemeButton onClick={()=>mintToSKALE()}>mint to SKALE</MemeButton>\n              <hr />\n              <p><strong>arbitrum</strong></p>\n              <p>mint to arbitrum (cheaper / requires bridging to l1)</p>\n              &nbsp;\n              <MemeButton onClick={()=>mintToArb()}>mint to arbitrum</MemeButton>\n            </section>\n            <footer className=\"modal-card-foot\">\n            </footer>\n            </div>\n          </div>\n        </div>\n      </Route>\n      <Route path=\"/gallery\">\n        <div className=\"App\">\n          <Navigation />\n          <Gallery contract={contract} walletDetected={walletDetected} />\n        </div>\n      </Route>\n      <Route path=\"/about\">\n        <div className=\"App\">\n          <Navigation />\n          <About />\n        </div>\n      </Route>\n      <Route path=\"/v/:id\">\n        <div className=\"App\">\n          <Navigation />\n          <View contract={contract} walletDetected={walletDetected} />\n        </div>\n      </Route>\n      <Route component={NotFound}>\n        <div className=\"App\">\n          <Navigation />\n          <NotFound />\n        </div>\n      </Route>\n    </Switch>\n  );\n}\n\nexport default App;\n","import { useState } from \"react\";\n\nimport { Navbar, Section } from 'react-bulma-components';\nimport styled from 'styled-components';\n\nimport troll from \"../Assets/troll.png\"\n\nimport Login from \"./Torus\"\n\nimport {\n  Link\n} from \"react-router-dom\";\n\nconst StyledLink = styled(Link)`\n  color: #4a4a4a;\n`;\n\nconst Navigation = () => {\n  const [navIsActive, setNavIsActive] = useState(false);\n\n  return (\n      <Navbar\n        active={navIsActive}\n        transparent={true}\n        style={{background: \"none\"}}\n      >\n        <Navbar.Brand>\n          <Navbar.Item renderAs=\"span\">\n            <Link to=\"/\">\n              <img src={troll} alt=\"Flaunt\" />\n            </Link>\n          </Navbar.Item>\n          <Navbar.Burger onClick={() => setNavIsActive(navIsActive ? false : true) }/>\n        </Navbar.Brand>\n        <Navbar.Menu>\n          <Navbar.Container>\n            <Navbar.Item renderAs=\"span\">\n              <StyledLink to=\"/\">\n                home\n              </StyledLink>\n            </Navbar.Item>\n            <Navbar.Item renderAs=\"span\">\n              <StyledLink to=\"/gallery\">\n                gallery\n              </StyledLink>\n            </Navbar.Item>\n            <Navbar.Item renderAs=\"span\">\n              <StyledLink to=\"/about\">\n                about\n              </StyledLink>\n            </Navbar.Item>\n          </Navbar.Container>\n          <Navbar.Container align=\"end\">\n            <Navbar.Item href=\"#\">\n              <Login />\n            </Navbar.Item>\n          </Navbar.Container>\n        </Navbar.Menu>\n      </Navbar>\n  );\n};\n\nexport default Navigation;","import React, { useState, useEffect } from \"react\";\n\nimport {\n  Link\n} from \"react-router-dom\";\n\nimport { Button  } from 'react-bulma-components';\n\nconst Gallery = ({contract, walletDetected}) => {\n  const [assets, setAssets] = useState([])\n  const [totalSupply, setTotalSupply] = useState(0)\n\n  const load = async () => {\n    console.log(contract)\n    const totalSupplyNum = (await contract.totalSupply()).toNumber();\n\n    setTotalSupply(totalSupplyNum)\n\n    const items = [...Array(totalSupplyNum)].map(async (_, i) => {\n      const id = i+1;\n      const item = await contract.tokenURI(id)\n\n      // const metata = await fetch(item);\n\n      const newItem = (\n        <li key={i}>\n          <Link to={`/v/${id}`}>\n            {`${item} (${id})`}\n          </Link>\n        </li>\n      );\n\n      setAssets((prev) => {\n        return [...prev, newItem];\n      });\n    });\n  }\n\n  useEffect(() => {\n    // if (walletDetected) {\n      load()\n    // }\n  }, [])\n  \n  return (\n    <div className=\"App\">\n      <h2>Gallery</h2>\n      <header className=\"App-header\">\n        <p>all the meme-ified goodness ({totalSupply})</p>\n        <ul>\n          {assets}\n        </ul>\n      </header>\n    </div>\n  )\n};\n\nexport default Gallery;\n","import React, { useState, useEffect } from \"react\";\n\nimport { Button  } from 'react-bulma-components';\n\nconst About = ({contract}) => {\n  \n  return (\n    <div className=\"App\">\n      <h2>About</h2>\n      <header className=\"App-header\">\n        <h1>meme-ify your NFTs</h1>\n        <p>generate derivative assets (new NFTs) from items you already own</p>\n      </header>\n    </div>\n  )\n};\n\nexport default About;\n","import React, { useState, useEffect } from \"react\";\n\nimport { ReactSVG } from 'react-svg'\nimport styled from 'styled-components';\n\nimport {\n  useParams\n} from \"react-router-dom\";\n\nimport { Button  } from 'react-bulma-components';\n\nconst StyledSVG = styled(ReactSVG)`\n  width: 60vh;\n  height: 60vh;\n  margin-bottom: 1rem;\n  box-shadow:\n    0 2.8px 2.2px rgba(0, 0, 0, 0.034),\n    0 6.7px 5.3px rgba(0, 0, 0, 0.048),\n    0 12.5px 10px rgba(0, 0, 0, 0.06),\n    0 22.3px 17.9px rgba(0, 0, 0, 0.072),\n    0 41.8px 33.4px rgba(0, 0, 0, 0.086),\n    0 100px 80px rgba(0, 0, 0, 0.12);\n  background-color: #e8e8e8;\n`;\n\nconst Title = styled.h2`\n  font-weight: bold;\n  font-size: 2rem;\n`;\n\nconst ipfsClient = require(\"ipfs-http-client\");\n\nconst Gallery = ({contract, walletDetected}) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [svg, setSvg] = useState();\n\n  const { id } = useParams()\n\n  const sanitize = (url) => {\n    const cidV0 = url.replace('/ipfs', '').replace('ipfs://', '');\n    const cidV1 = new ipfsClient.CID(cidV0).toV1();\n    return `https://${cidV1}.ipfs.dweb.link/`;\n  }\n\n  const load = async () => {\n    \n    const metadataUri = await contract.tokenURI(id)\n\n    console.log(metadataUri)\n\n    const santizedMetadataUri = sanitize(metadataUri)\n    const res = await fetch(santizedMetadataUri);\n    const metadata = await res.json();\n\n    const santizedSvgUri = sanitize(metadata.image)\n\n    setSvg(santizedSvgUri)\n    setTitle(metadata.name)\n    setDescription(metadata.description)\n  }\n\n  useEffect(() => {\n    // if (walletDetected) {\n      load()\n    // }\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {\n          svg === undefined ?\n          (`loading`) : <StyledSVG src={svg} wrapper=\"span\" />\n        }\n        <Title>{title}</Title>\n        <div>{description}</div>\n      </header>\n    </div>\n  )\n};\n\nexport default Gallery;\n","import React from \"react\";\n\nconst NotFound = ({contract}) => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>not found 😕</h1>\n      </header>\n    </div>\n  )\n};\n\nexport default NotFound;\n","export default __webpack_public_path__ + \"static/media/eyes.81ad596d.png\";","export default __webpack_public_path__ + \"static/media/shades.3530aa03.png\";","export default __webpack_public_path__ + \"static/media/doge.c79b108e.png\";","export default __webpack_public_path__ + \"static/media/joint.2da67bea.png\";","export default __webpack_public_path__ + \"static/media/sample-1.1e6f802a.png\";","export default __webpack_public_path__ + \"static/media/sample-2.e854d957.jpg\";","export default __webpack_public_path__ + \"static/media/sample-3.942cb87b.jpg\";","export default __webpack_public_path__ + \"static/media/sample-4.81671ddb.png\";","export default __webpack_public_path__ + \"static/media/sample-5.120f9728.png\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {\n  BrowserRouter\n} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}