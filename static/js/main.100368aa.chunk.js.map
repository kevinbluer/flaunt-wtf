{"version":3,"sources":["App.js","Assets/troll.png","Components/Navigation.js","Pages/Gallery.js","Pages/About.js","Assets/eyes.png","Assets/shades.png","Assets/doge.png","Assets/joint.png","Assets/sample-1.png","Assets/sample-2.jpg","Assets/sample-3.jpg","Assets/sample-4.png","reportWebVitals.js","index.js"],"names":["l1Provider","l1Signer","StyledLink","styled","Link","Navigation","useState","navIsActive","setNavIsActive","active","transparent","style","background","Brand","Item","renderAs","to","src","troll","alt","Burger","onClick","Menu","Container","Gallery","contract","walletDetected","assets","setAssets","totalSupply","setTotalSupply","load","a","totalSupplyNum","toNumber","Array","map","_","i","tokenURI","item","newItem","prev","useEffect","className","About","fabric","require","ipfs","host","port","protocol","window","ethereum","enable","then","ethers","providers","Web3Provider","getSigner","err","Contract","StyledSketchField","SketchField","StyledTextBox","input","StyledButton","button","MemeButton","ThumbImg","img","App","imageCID","setImageCID","metadataCID","setMetadataCID","Tools","Select","tool","setTool","mintModal","setMintModal","loadModal","setLoadModal","saveModal","setSaveModal","title","setTitle","description","setDescription","_sketch","useRef","text","current","addText","remove","removeSelected","toggleLoadModal","url","axios","get","responseType","response","reader","FileReader","readAsDataURL","data","onload","Image","fromURL","result","oImg","scaleToWidth","setBackgroundFromDataUrl","toDataURL","stretched","originX","originY","toggleSaveModal","save","actuallySave","onloadend","fileContents","add","ipfsImg","metadata","ipfsMetadata","canvas","fetch","blob","mintNFT","getAddress","address","mint","path","exact","addImg","doge","eyes","shades","joint","Pencil","width","height","lineColor","lineWidth","ref","c","name","aria-label","sample1","sample2","sample3","sample4","value","onChange","e","currentTarget","href","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.100368aa.chunk.js","sourcesContent":["import './App.css';\n\nimport React, { useRef, useState } from \"react\";\n\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport {SketchField, Tools} from 'react-sketch';\nimport { ethers } from \"ethers\";\n\nimport {\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport Navigation from \"./Components/Navigation\";\nimport Gallery from \"./Pages/Gallery\";\nimport About from \"./Pages/About\";\n\nimport eyes from './Assets/eyes.png';\nimport shades from './Assets/shades.png';\nimport doge from './Assets/doge.png';\nimport joint from './Assets/joint.png';\nimport troll from './Assets/troll.png';\n\nimport sample1 from './Assets/sample-1.png';\nimport sample2 from './Assets/sample-2.jpg';\nimport sample3 from './Assets/sample-3.jpg';\nimport sample4 from './Assets/sample-4.png';\n\nconst fabric = require(\"fabric\").fabric;\n\nconst IPFS = require('ipfs-mini');\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\n\n// const provider = new ethers.providers.InfuraProvider();\n// const provider = new ethers.providers.JsonRpcProvider(`http://localhost:9545`);\nlet l1Provider, l1Signer, l2Signer;\nlet walletDetected = !!window.ethereum;\n\ntry {\n  window.ethereum.enable().then(l1Provider = new ethers.providers.Web3Provider(window.ethereum));\n  l1Signer = l1Provider.getSigner();\n} catch (err) {\n  // TODO\n}\n\nconst abi = [\n  \"function totalSupply() view returns (uint)\",\n  \"function tokenByIndex(uint) view returns (uint)\",\n  \"function tokenURI(uint) view returns (string)\",\n  \"function mint(address, string) returns (uint)\"\n];\n\nconst contract = new ethers.Contract(\"0x6cA2F11a43b2B8f4DCE7De62f8Dc03f8E12BC48F\", abi, l1Signer);\n\nconst StyledSketchField = styled(SketchField)`\n  margin-top: 1rem;\n  box-shadow:\n    0 2.8px 2.2px rgba(0, 0, 0, 0.034),\n    0 6.7px 5.3px rgba(0, 0, 0, 0.048),\n    0 12.5px 10px rgba(0, 0, 0, 0.06),\n    0 22.3px 17.9px rgba(0, 0, 0, 0.072),\n    0 41.8px 33.4px rgba(0, 0, 0, 0.086),\n    0 100px 80px rgba(0, 0, 0, 0.12);\n  background-color: #e8e8e8;\n`;\n\nconst StyledTextBox = styled.input`\n  width: 100%;\n  font-size: 1.6rem;\n  border: solid 1px #c1b6b6;\n  border-radius: 1rem;\n  padding: 0.4rem 0.8rem;\n  margin-bottom: 0.2rem;\n`;\n\nconst StyledButton = styled.button`\n  cursor: pointer;\n  margin: 0.6rem 0.4rem;\n  border-radius: 1rem;\n  border: 0;\n  padding: 0.6rem 1.4rem;\n  font-size: 2rem;\n  font-family: 'courier';\n  box-shadow:\n    0 2.8px 2.2px rgba(0, 0, 0, 0.034),\n    0 6.7px 5.3px rgba(0, 0, 0, 0.048),\n    0 12.5px 10px rgba(0, 0, 0, 0.06),\n    0 22.3px 17.9px rgba(0, 0, 0, 0.072),\n    0 41.8px 33.4px rgba(0, 0, 0, 0.086),\n    0 100px 80px rgba(0, 0, 0, 0.12);\n\n  :hover {\n    background-color: orange;\n    color: white;\n  }\n`;\n\nconst MemeButton = styled.button`\n  cursor: pointer;\n  margin: 1rem 0.1rem 1rem 0.1rem;\n  border: 0;\n  border-radius: 0.4rem;\n  padding: 0.4rem 1rem;\n  font-size: 1rem;\n  font-family: 'courier';\n  box-shadow:\n    0 2.8px 2.2px rgba(0, 0, 0, 0.034),\n    0 6.7px 5.3px rgba(0, 0, 0, 0.048),\n    0 12.5px 10px rgba(0, 0, 0, 0.06),\n    0 22.3px 17.9px rgba(0, 0, 0, 0.072),\n    0 41.8px 33.4px rgba(0, 0, 0, 0.086),\n    0 100px 80px rgba(0, 0, 0, 0.12);\n\n  :hover {\n    background-color: orange;\n    color: white;\n  }\n`;\n\nconst ThumbImg = styled.img`\n  border-radius: 1rem;\n  width: 6rem;\n  padding: 0.2rem;\n  cursor: pointer;\n`;\n\nfunction App() {\n  const [imageCID, setImageCID] = useState('');\n  const [metadataCID, setMetadataCID] = useState('');\n  const [tool, setTool] = useState(Tools.Select);\n  const [mintModal, setMintModal] = useState(false);\n  const [loadModal, setLoadModal] = useState(false);\n  const [saveModal, setSaveModal] = useState(false);\n  const [title, setTitle] = useState('nft name');\n  const [description, setDescription] = useState('nft description');\n\n  const _sketch = useRef();\n\n  const thugify = () => {\n    _sketch.current.addImg(shades)\n    _sketch.current.addImg(joint)\n  }\n\n  const dogeify = () => {\n    _sketch.current.addImg(doge)\n  }\n\n  const laserify = () => {\n    _sketch.current.addImg(eyes)\n  }\n\n  const trollify = () => {\n    _sketch.current.addImg(troll)\n  }\n\n  const select = () => {\n    setTool(Tools.Select)\n  }\n\n  const pen = () => {\n    setTool(Tools.Pencil)\n  }\n\n  const text = async () => {\n    _sketch.current.addText('SCALING FTW', {\n      \"fontFamily\": \"Impact\",\n      \"fill\": \"#fff\",\n      \"stroke\": \"#000\",\n      \"strokeWidth\": \"1\"\n    });\n    setTool(Tools.Select)\n  }\n\n  const remove = async () => {\n    _sketch.current.removeSelected();\n  }\n\n  const toggleLoadModal = () => {\n    if (loadModal) {\n      setLoadModal(false)\n    } else {\n      setLoadModal(true)\n    }\n  }\n\n  const load = async (url) => {    \n\n    const response = await axios.get(url, { responseType: 'blob' }); \n    const reader = new FileReader();\n    reader.readAsDataURL(response.data); \n    reader.onload = async () => {\n      fabric.Image.fromURL(reader.result, function(oImg) {\n        oImg.scaleToWidth(640);\n        _sketch.current.setBackgroundFromDataUrl(oImg.toDataURL(), {\n            stretched: true,\n            originX: \"left\",\n            originY: \"top\",\n          }); \n      });\n    }\n\n    setLoadModal(false)\n\n  }\n\n  const toggleSaveModal = () => {\n    if (saveModal) {\n      setSaveModal(false)\n    } else {\n      setSaveModal(true)\n    }\n  }\n\n  const save = async () => {\n    toggleSaveModal()\n  }\n\n  const actuallySave = async () => {\n    const reader = new FileReader()\n    reader.onloadend = async function () {\n      const fileContents = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\"><image width=\"100%\" height=\"100%\" href=\"${reader.result}\" /></svg>`;\n      const ipfsImg = await ipfs.add(fileContents);\n      setImageCID(ipfsImg);\n\n      // TODO - load the title / description from fields (prepopulate from what's loaded)\n      const metadata = `{ \"name\":\"${title}\", \"description\":\"${description}\",\"image\":\"ipfs://${ipfsImg}\" }`\n\n      const ipfsMetadata = await ipfs.add(metadata);\n      setMetadataCID(ipfsMetadata);\n\n    }\n    const canvas = _sketch.current.toDataURL();\n    const blob = await (await fetch(canvas)).blob();\n    reader.readAsDataURL(blob);\n  }\n\n  const mintNFT = async () => {\n    const address = await l1Signer.getAddress();\n    const tx = contract.mint(address, metadataCID)\n  }\n\n  const mint = () => {\n    if (mintModal) {\n      setMintModal(false)\n    } else {\n      setMintModal(true)\n    }\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" exact>\n        <div className=\"App\">\n          <Navigation />\n          <header className=\"App-header\">\n            <div>\n              <StyledButton onClick={() => toggleLoadModal()}>load</StyledButton>\n              <span>&gt;</span>\n              <StyledButton onClick={() => save()}>save</StyledButton>\n              <span>&gt;</span>\n              <StyledButton onClick={() => mint()}>mint</StyledButton>\n            </div>\n            <div>\n              <MemeButton onClick={() => dogeify()}>dogeify</MemeButton>\n              <MemeButton onClick={() => laserify()}>laserify</MemeButton>\n              <MemeButton onClick={() => trollify()}>trollify</MemeButton>\n              <MemeButton onClick={() => thugify()}>thugify</MemeButton>\n              <MemeButton onClick={() => text()}>textify</MemeButton>\n              &nbsp;&nbsp;\n              <MemeButton onClick={() => select()}>select</MemeButton>\n              <MemeButton onClick={() => pen()}>pen</MemeButton>\n              <MemeButton onClick={() => remove()}>remove</MemeButton>\n            </div>\n            <StyledSketchField \n              width='640px' \n              height='640px' \n              tool={tool} \n              lineColor='black'\n              lineWidth={3}\n              ref={(c) => { _sketch.current = c }}\n              name='sketch'\n              />\n          </header>\n\n          <div className={`modal ${ loadModal ? 'is-active' : ''}`}>\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-content\">\n            <header className=\"modal-card-head\">\n              <p className=\"modal-card-title\">load</p>\n              <button className=\"delete\" aria-label=\"close\" onClick={()=> toggleLoadModal() }></button>\n            </header>\n            <section className=\"modal-card-body\">\n              <h2>load a sample nft asset...</h2>\n              <ThumbImg src={sample1} onClick={() => load('https://bafybeibhg2ik63dnkb3el4nlh5qry3lnhfok3nh3csywi6joedv25kh77i.ipfs.dweb.link/image.png')}  />\n              <ThumbImg src={sample2} onClick={() => load('https://bafybeid5o4fkfgq62uvzuh24sgoo6jj2nir7ggk4o5rhwqb4sfr4wgbfku.ipfs.dweb.link/nft.jpg')} />\n              <ThumbImg src={sample3} onClick={() => load('https://bafybeieyl2r3uorgpotq76p6w2dbpxl3m2qablgkjawyzn5htdzudb5s4y.ipfs.dweb.link/nft.jpg')} />\n              <ThumbImg src={sample4} onClick={() => load('https://ipfs.io/ipfs/Qme9DzDKpwoY5JGXs6d9YwPrN5u6VbSgf31LC2YNfUX5hu/nft.png')} />\n             \n              {/* <hr />\n              <h2>load from an existing NFT...</h2>\n              <div>\n                <MemeButton onClick={() => load()}>load from contract</MemeButton>\n              </div> */}\n            </section>\n            <footer className=\"modal-card-foot\">\n            </footer>\n            </div>\n          </div>\n\n          <div className={`modal ${ saveModal ? 'is-active' : ''}`}>\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-content\">\n            <header className=\"modal-card-head\">\n              <p className=\"modal-card-title\">save</p>\n              <button className=\"delete\" aria-label=\"close\" onClick={()=> toggleSaveModal() }></button>\n            </header>\n            <section className=\"modal-card-body\">\n              <StyledTextBox value={title} onChange={(e) => setTitle(e.currentTarget.value)} />\n              <br />\n              <StyledTextBox value={description} onChange={(e) => setDescription(e.currentTarget.value)} />\n              <br />\n              <MemeButton onClick={() => actuallySave()}>save to ipfs</MemeButton>\n              <hr />\n              <p>Image CID: <a href={`ipfs://${imageCID}`} target=\"_blank\">{`ipfs://${imageCID}`}</a></p>\n              <p>Metadata CID: <a href={`ipfs://${metadataCID}`} target=\"_blank\">{`ipfs://${metadataCID}`}</a></p>\n              <p>{ metadataCID ? `done! you're now ready to mint!` : ``}</p>\n            </section>\n            <footer className=\"modal-card-foot\">\n            </footer>\n            </div>\n          </div>\n\n          <div className={`modal ${ mintModal ? 'is-active' : ''}`}>\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-content\">\n            <header className=\"modal-card-head\">\n              <p className=\"modal-card-title\">mint</p>\n              <button className=\"delete\" aria-label=\"close\" onClick={()=>mint()}></button>\n            </header>\n            <section className=\"modal-card-body\">\n              <p>mint directly to layer 1 (more expensive / immediately usable)</p>\n              <MemeButton onClick={()=>mintNFT()}>Mint to L1</MemeButton>\n            </section>\n            <footer className=\"modal-card-foot\">\n            </footer>\n            </div>\n          </div>\n\n        </div>\n      </Route>\n      <Route path=\"/gallery\">\n        <div className=\"App\">\n          <Navigation />\n          <Gallery contract={contract} walletDetected={walletDetected} />\n        </div>\n      </Route>\n      <Route path=\"/about\">\n        <div className=\"App\">\n          <Navigation />\n          <About />\n        </div>\n      </Route>\n    </Switch>\n  );\n}\n\nexport default App;\n","export default __webpack_public_path__ + \"static/media/troll.b677baa7.png\";","import { useState } from \"react\";\n\nimport { Navbar, Section } from 'react-bulma-components';\nimport styled from 'styled-components';\n\nimport troll from \"../Assets/troll.png\"\n\nimport {\n  Link\n} from \"react-router-dom\";\n\nconst StyledLink = styled(Link)`\n  color: #4a4a4a;\n`;\n\nconst Navigation = () => {\n  const [navIsActive, setNavIsActive] = useState(false);\n\n  return (\n      <Navbar\n        active={navIsActive}\n        transparent={true}\n        style={{background: \"none\"}}\n      >\n        <Navbar.Brand>\n          <Navbar.Item renderAs=\"span\">\n            <Link to=\"/\">\n              <img src={troll} alt=\"Flaunt\" />\n            </Link>\n          </Navbar.Item>\n          <Navbar.Burger onClick={() => setNavIsActive(navIsActive ? false : true) }/>\n        </Navbar.Brand>\n        <Navbar.Menu>\n          <Navbar.Container>\n            <Navbar.Item renderAs=\"span\">\n              <StyledLink to=\"/\">\n                home\n              </StyledLink>\n            </Navbar.Item>\n            <Navbar.Item renderAs=\"span\">\n              <StyledLink to=\"/gallery\">\n                gallery\n              </StyledLink>\n            </Navbar.Item>\n            <Navbar.Item renderAs=\"span\">\n              <StyledLink to=\"/about\">\n                about\n              </StyledLink>\n            </Navbar.Item>\n          </Navbar.Container>\n        </Navbar.Menu>\n      </Navbar>\n  );\n};\n\nexport default Navigation;","import React, { useState, useEffect } from \"react\";\n\nimport { Button  } from 'react-bulma-components';\n\nconst Gallery = ({contract, walletDetected}) => {\n  const [assets, setAssets] = useState([])\n  const [totalSupply, setTotalSupply] = useState(0)\n\n  const load = async () => {\n    debugger;\n    const totalSupplyNum = (await contract.totalSupply()).toNumber();\n\n    setTotalSupply(totalSupplyNum)\n\n    const items = [...Array(totalSupplyNum)].map(async (_, i) => {\n      const item = await contract.tokenURI(i+1)\n\n      // const metata = await fetch(item);\n\n      const newItem = (\n        <li key={i}>{item}</li>\n      );\n\n      setAssets((prev) => {\n        return [...prev, newItem];\n      });\n    });\n  }\n\n  useEffect(() => {\n    if (walletDetected) {\n      load()\n    }\n  }, [])\n  \n  return (\n    <div className=\"App\">\n      <h2>Gallery</h2>\n      <header className=\"App-header\">\n        <p>all the meme-ified goodness ({totalSupply})</p>\n        <ul>\n          {assets}\n        </ul>\n      </header>\n    </div>\n  )\n};\n\nexport default Gallery;\n","import React, { useState, useEffect } from \"react\";\n\nimport { Button  } from 'react-bulma-components';\n\nconst About = ({contract}) => {\n  \n  return (\n    <div className=\"App\">\n      <h2>About</h2>\n      <header className=\"App-header\">\n        <h1>meme-ify your NFTs</h1>\n        <p>generate derivative assets (new NFTs) from items you already own</p>\n      </header>\n    </div>\n  )\n};\n\nexport default About;\n","export default __webpack_public_path__ + \"static/media/eyes.81ad596d.png\";","export default __webpack_public_path__ + \"static/media/shades.3530aa03.png\";","export default __webpack_public_path__ + \"static/media/doge.c79b108e.png\";","export default __webpack_public_path__ + \"static/media/joint.2da67bea.png\";","export default __webpack_public_path__ + \"static/media/sample-1.1e6f802a.png\";","export default __webpack_public_path__ + \"static/media/sample-2.e854d957.jpg\";","export default __webpack_public_path__ + \"static/media/sample-3.942cb87b.jpg\";","export default __webpack_public_path__ + \"static/media/sample-4.81671ddb.png\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {\n  BrowserRouter\n} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}